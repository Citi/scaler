# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Linter And Unittest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Python 3.8
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: "3.8"

      - name: Install necessary component
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo DEBIAN_FRONTEND=noninteractive sudo apt install -y tzdata
          # DEBIAN_FRONTEND=noninteractive apt install -y tzdata
          sudo apt install software-properties-common -y
          sudo apt install cmake clang curl pkg-config -y

      # - name: Make third party directory
      #   run: |
      #     mkdir -p third_party/include
      #     mkdir -p third_party/lib
      #     mkdir -p third_party/bin

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          # path: third_party/include/boost
          path: /usr/include/boost
          key: ${{ runner.os }}-boost

      - if: ${{ steps.cache-boost.outputs.cache-hit != 'true' }}
        run: |
          curl -L https://archives.boost.io/release/1.88.0/source/boost_1_88_0.tar.gz -o boost188.tar.gz
          tar -xzf boost188.tar.gz
          sudo mkdir -p /usr/include/boost
          sudo mv boost_1_88_0/boost /usr/include/.
          echo "Installed Boost into third_party/include/boost"

      - name: Cache Capnp
        id: cache-capnp
        uses: actions/cache@v4
        with:
          path: /usr/include/capnp
          key: ${{ runner.os }}-capnp

      - if: ${{ steps.cache-capnp.outputs.cache-hit != 'true' }}
        run: |
          curl -O https://capnproto.org/capnproto-c++-1.1.0.tar.gz
          tar zxf capnproto-c++-1.1.0.tar.gz
          cd capnproto-c++-1.1.0
          ./configure --prefix=/usr/
          make -j6 check
          sudo make install
          echo "Installed capnp into third_party/include/capnp"


      - name: Build Object Storage Component
        run: |
          cmake -S . -B build -DCMAKE_CXX_COMPILER=$(which clang++)
          cd build && make

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pyproject-flake8 mypy
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          pflake8 .
      - name: Lint with MyPy
        run: |
          mypy --install-types --non-interactive .
      - name: Run python unittest
        run: |
          python -m unittest discover -v tests
      - name: Run examples
        run: |
          pip install -r examples/applications/requirements_applications.txt
          for example in "./examples"/*.py; do
            echo "Running $example"
            PYTHONPATH=. python $example
          done
          for example in "./examples/applications"/*.py; do
            echo "Running $example"
            PYTHONPATH=. python $example
          done
