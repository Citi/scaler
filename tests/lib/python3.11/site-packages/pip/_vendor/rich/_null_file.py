from types import TracebackType
from typing import IO, Iterable, Iterator, List, Optional, Type


class NullFile(IO[str]):
    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def close(self) -> None:
        pass

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def isatty(self) -> bool:
        return False

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def read(self, __n: int = 1) -> str:
        return ""

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def readable(self) -> bool:
        return False

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def readline(self, __limit: int = 1) -> str:
        return ""

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def readlines(self, __hint: int = 1) -> List[str]:
        return []

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def seek(self, __offset: int, __whence: int = 1) -> int:
        return 0

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def seekable(self) -> bool:
        return False

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def tell(self) -> int:
        return 0

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def truncate(self, __size: Optional[int] = 1) -> int:
        return 0

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def writable(self) -> bool:
        return False

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def writelines(self, __lines: Iterable[str]) -> None:
        pass

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def __next__(self) -> str:
        return ""

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def __iter__(self) -> Iterator[str]:
        return iter([""])

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def __enter__(self) -> IO[str]:
        pass

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def __exit__(
        self,
        __t: Optional[Type[BaseException]],
        __value: Optional[BaseException],
        __traceback: Optional[TracebackType],
    ) -> None:
        pass

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def write(self, text: str) -> int:
        return 0

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def flush(self) -> None:
        pass

    @timeout_decorator.timeout(LOCAL_TIMEOUT)
    def fileno(self) -> int:
        return -1


NULL_FILE = NullFile()
